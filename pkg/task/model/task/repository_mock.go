// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source ./repository.go -destination ./repository_mock.go -package task -typed
//

// Package task is a generated GoMock package.
package task

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAndReturn mocks base method.
func (m *MockRepository) CreateAndReturn(ctx context.Context, draft *DraftTask) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndReturn", ctx, draft)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndReturn indicates an expected call of CreateAndReturn.
func (mr *MockRepositoryMockRecorder) CreateAndReturn(ctx, draft any) *MockRepositoryCreateAndReturnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndReturn", reflect.TypeOf((*MockRepository)(nil).CreateAndReturn), ctx, draft)
	return &MockRepositoryCreateAndReturnCall{Call: call}
}

// MockRepositoryCreateAndReturnCall wrap *gomock.Call
type MockRepositoryCreateAndReturnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryCreateAndReturnCall) Return(arg0 *Task, arg1 error) *MockRepositoryCreateAndReturnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryCreateAndReturnCall) Do(f func(context.Context, *DraftTask) (*Task, error)) *MockRepositoryCreateAndReturnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryCreateAndReturnCall) DoAndReturn(f func(context.Context, *DraftTask) (*Task, error)) *MockRepositoryCreateAndReturnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
