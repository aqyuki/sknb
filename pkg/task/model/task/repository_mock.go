// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source ./repository.go -destination ./repository_mock.go -package task -typed
//

// Package task is a generated GoMock package.
package task

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAndReturn mocks base method.
func (m *MockRepository) CreateAndReturn(ctx context.Context, draft *DraftTask) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndReturn", ctx, draft)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndReturn indicates an expected call of CreateAndReturn.
func (mr *MockRepositoryMockRecorder) CreateAndReturn(ctx, draft any) *MockRepositoryCreateAndReturnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndReturn", reflect.TypeOf((*MockRepository)(nil).CreateAndReturn), ctx, draft)
	return &MockRepositoryCreateAndReturnCall{Call: call}
}

// MockRepositoryCreateAndReturnCall wrap *gomock.Call
type MockRepositoryCreateAndReturnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryCreateAndReturnCall) Return(arg0 *Task, arg1 error) *MockRepositoryCreateAndReturnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryCreateAndReturnCall) Do(f func(context.Context, *DraftTask) (*Task, error)) *MockRepositoryCreateAndReturnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryCreateAndReturnCall) DoAndReturn(f func(context.Context, *DraftTask) (*Task, error)) *MockRepositoryCreateAndReturnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindByCode mocks base method.
func (m *MockRepository) FindByCode(ctx context.Context, code int) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", ctx, code)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockRepositoryMockRecorder) FindByCode(ctx, code any) *MockRepositoryFindByCodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockRepository)(nil).FindByCode), ctx, code)
	return &MockRepositoryFindByCodeCall{Call: call}
}

// MockRepositoryFindByCodeCall wrap *gomock.Call
type MockRepositoryFindByCodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryFindByCodeCall) Return(arg0 *Task, arg1 error) *MockRepositoryFindByCodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryFindByCodeCall) Do(f func(context.Context, int) (*Task, error)) *MockRepositoryFindByCodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryFindByCodeCall) DoAndReturn(f func(context.Context, int) (*Task, error)) *MockRepositoryFindByCodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindByCodeForUpdate mocks base method.
func (m *MockRepository) FindByCodeForUpdate(ctx context.Context, code int) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCodeForUpdate", ctx, code)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCodeForUpdate indicates an expected call of FindByCodeForUpdate.
func (mr *MockRepositoryMockRecorder) FindByCodeForUpdate(ctx, code any) *MockRepositoryFindByCodeForUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCodeForUpdate", reflect.TypeOf((*MockRepository)(nil).FindByCodeForUpdate), ctx, code)
	return &MockRepositoryFindByCodeForUpdateCall{Call: call}
}

// MockRepositoryFindByCodeForUpdateCall wrap *gomock.Call
type MockRepositoryFindByCodeForUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryFindByCodeForUpdateCall) Return(arg0 *Task, arg1 error) *MockRepositoryFindByCodeForUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryFindByCodeForUpdateCall) Do(f func(context.Context, int) (*Task, error)) *MockRepositoryFindByCodeForUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryFindByCodeForUpdateCall) DoAndReturn(f func(context.Context, int) (*Task, error)) *MockRepositoryFindByCodeForUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, task *Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, task any) *MockRepositorySaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, task)
	return &MockRepositorySaveCall{Call: call}
}

// MockRepositorySaveCall wrap *gomock.Call
type MockRepositorySaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositorySaveCall) Return(arg0 error) *MockRepositorySaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositorySaveCall) Do(f func(context.Context, *Task) error) *MockRepositorySaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositorySaveCall) DoAndReturn(f func(context.Context, *Task) error) *MockRepositorySaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
